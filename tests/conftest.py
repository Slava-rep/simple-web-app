import pytest
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from app import app as flask_app
import threading
import time
import os
from datetime import datetime


#  –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
@pytest.hookimpl(tryfirst=True)
def pytest_configure(config):
    """–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    if not os.path.exists('reports'):
        os.makedirs('reports')

@pytest.fixture(scope="session", autouse=True)
def configure_html_report():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTML –æ—Ç—á–µ—Ç–æ–≤"""
    # –≠—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
    yield
    
    # –ö–æ–¥ –ø–æ—Å–ª–µ yield –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: reports/pytest-report.html")
    print("="*60)

# –í—Å–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
@pytest.fixture(scope='session')
def app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (session scope)"""
    thread = threading.Thread(target=lambda: flask_app.run(port=5001, debug=False, use_reloader=False))
    thread.daemon = True
    thread.start()
    time.sleep(2)
    yield flask_app

@pytest.fixture(scope='session')
def base_url():
    """–ë–∞–∑–æ–≤—ã–π URL (session scope –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–ª–∞–≥–∏–Ω–∞–º–∏)"""
    return 'http://localhost:5001'

@pytest.fixture
def client(app):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è API (function scope)"""
    return app.test_client()

@pytest.fixture
def api_client(base_url):
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (function scope)"""
    return requests.Session()

@pytest.fixture
def browser():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ Selenium —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.add_argument('--disable-gpu')
    chrome_options.add_argument('--disable-extensions')
    chrome_options.add_argument('--disable-software-rasterizer')
    chrome_options.add_argument('--log-level=3')  # –£–±–∏—Ä–∞–µ—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
    
    driver = webdriver.Chrome(options=chrome_options)
    driver.implicitly_wait(10)
    
    yield driver
    
    driver.quit()

@pytest.fixture
def user_data():
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (function scope)"""
    return [
        {'name': 'Test User 1', 'email': 'test1@example.com'},
        {'name': 'Test User 2', 'email': 'test2@example.com'},
        {'name': 'Test User 3', 'email': 'test3@example.com'}
    ]

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def fresh_app():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    from app import users
    original_users = users.copy()
    yield flask_app
    users.clear()
    users.extend(original_users)

@pytest.fixture
def test_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return {'id': 100, 'name': 'Test User', 'email': 'test@example.com'}

@pytest.fixture(autouse=True)
def reset_state_before_tests(api_client, base_url):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    # –ö–æ–¥ –¥–æ yield –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–ï–†–ï–î —Ç–µ—Å—Ç–æ–º
    print("\n" + "="*50)
    print("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É...")
    
    yield  # –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç
    
    # –ö–æ–¥ –ø–æ—Å–ª–µ yield –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    try:
        response = api_client.post(f'{base_url}/api/reset')
        if response.status_code == 200:
            print("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {response.status_code}")
    except Exception as e:
        print(f"‚úó –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: {e}")
    print("="*50)