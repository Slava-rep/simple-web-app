import pytest
import requests
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from app import app as flask_app
import threading
import time
import os
from datetime import datetime

"""
# –≤ —Ñ–∞–π–ª–µ –æ–ø–∏—Å–∞–Ω—ã –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –æ—Ç—á–µ—Ç–∞–º–∏
# –í —ç—Ç–æ–º —Ñ–∞–π–ª–µ –æ–ø–µ—Ä–µ–¥–µ–ª–µ–Ω—ã —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ (scope) –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Ç–æ –µ—Å—Ç—å
# —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –±—Ä–∞—É–∑–µ—Ä –∑–∞–Ω–æ–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
# –î–æ–±–∞–≤–ª–µ–Ω—ã –ª–æ–≥–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
# –£–ª—É—á—à–µ–Ω–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ app –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
# –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ base_url –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
# –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
# –£–ª—É—á—à–µ–Ω–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ browser —Å –Ω–∞–¥–µ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π ChromeDriver
# –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTML –æ—Ç—á–µ—Ç–æ–≤
# –î–æ–±–∞–≤–ª–µ–Ω —Ö—É–∫ pytest_configure [–æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ reports –∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

"""
#  –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
@pytest.hookimpl(tryfirst=True)
def pytest_configure(config):
    """–°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤ –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç"""
    if not os.path.exists('reports'):
        os.makedirs('reports')

@pytest.fixture(scope="session", autouse=True)
def configure_html_report():
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è HTML –æ—Ç—á–µ—Ç–æ–≤"""
    # –≠—Ç–∞ —Ñ–∏–∫—Å—Ç—É—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏
    yield
    
    # –ö–æ–¥ –ø–æ—Å–ª–µ yield –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    print("\n" + "="*60)
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: reports/pytest-report.html")
    print("="*60)

# –í—Å–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
@pytest.fixture(scope='session')
def app():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    import socket
    from contextlib import closing
    
    def check_port(port):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç"""
        with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as sock:
            return sock.connect_ex(('localhost', port)) == 0
    
    port = 5001
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –ø–æ—Ä—Ç
    if check_port(port):
        print(f"‚ö†Ô∏è  –ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç. –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ä—Ç 5002...")
        port = 5002
        if check_port(port):
            raise Exception(f"–ü–æ—Ä—Ç—ã 5001 –∏ 5002 –∑–∞–Ω—è—Ç—ã. –û—Å–≤–æ–±–æ–¥–∏—Ç–µ –ø–æ—Ä—Ç—ã –∏–ª–∏ —É–±–µ–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å—ã.")
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(
        target=lambda: flask_app.run(
            host='0.0.0.0',  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ª—é–±—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
            port=port, 
            debug=False, 
            use_reloader=False,
            threaded=True  # –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
        )
    )
    thread.daemon = True
    thread.start()
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è)
    max_attempts = 10
    for i in range(max_attempts):
        try:
            response = requests.get(f'http://localhost:{port}/', timeout=2)
            if response.status_code == 200:
                print(f"‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                break
        except:
            if i < max_attempts - 1:
                time.sleep(1)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                raise Exception(f"Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ {max_attempts} —Å–µ–∫—É–Ω–¥")
    
    yield flask_app
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–≤ —Ç–µ–æ—Ä–∏–∏, –Ω–æ –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ daemon thread —Å–∞–º –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è)
    print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

@pytest.fixture(scope='session')
def base_url(app):
    """–ë–∞–∑–æ–≤—ã–π URL —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç–æ–º"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–º –ø–æ—Ä—Ç—É –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    import re
    import requests
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä—Ç—ã
    for port in [5001, 5002, 5003]:
        try:
            response = requests.get(f'http://localhost:{port}/', timeout=1)
            if response.status_code == 200:
                return f'http://localhost:{port}'
        except:
            continue
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return 'http://localhost:5001'

# @pytest.fixture(scope='session')
# def app():
#     """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
#     # –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤
#     # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
#     return flask_app

# @pytest.fixture(scope='session')
# def base_url():
#     """–ë–∞–∑–æ–≤—ã–π URL - –¥–ª—è UI —Ç–µ—Å—Ç–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä"""
#     return 'http://localhost:5000'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É 5000


@pytest.fixture
def client(app):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è API (function scope)"""
    return app.test_client()

@pytest.fixture
def api_client(base_url):
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ (function scope)"""
    return requests.Session()

@pytest.fixture
def browser():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞ Selenium —Å –Ω–∞–¥–µ–∂–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Chrome
        chrome_options = Options()
        chrome_options.add_argument('--headless=new')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--log-level=3')
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ ChromeDriver
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=chrome_options)
        
        driver.implicitly_wait(10)
        driver.set_page_load_timeout(30)
        
        print("‚úÖ ChromeDriver —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return driver
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        pytest.skip(f"–ë—Ä–∞—É–∑–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


@pytest.fixture
def user_data():
    """–ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (function scope)"""
    return [
        {'name': 'Test User 1', 'email': 'test1@example.com'},
        {'name': 'Test User 2', 'email': 'test2@example.com'},
        {'name': 'Test User 3', 'email': 'test3@example.com'}
    ]

# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è unit —Ç–µ—Å—Ç–æ–≤
@pytest.fixture
def fresh_app():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    from app import users
    original_users = users.copy()
    yield flask_app
    users.clear()
    users.extend(original_users)

@pytest.fixture
def test_user():
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    return {'id': 100, 'name': 'Test User', 'email': 'test@example.com'}

# –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ–∏–∫—Å—Ç—É—Ä–∞ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@pytest.fixture(autouse=True)
def reset_state_before_tests(api_client, base_url):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    print("\n" + "="*50)
    print("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É...")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    time.sleep(0.5)
    
    yield  # –∑–¥–µ—Å—å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç
    
    # –ö–æ–¥ –ø–æ—Å–ª–µ yield –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ü–û–°–õ–ï —Ç–µ—Å—Ç–∞
    print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è...")
    max_retries = 3
    for attempt in range(max_retries):
        try:
            response = api_client.post(f'{base_url}/api/reset', timeout=5)
            if response.status_code == 200:
                print("‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã")
                break
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞: {response.status_code}")
        except Exception as e:
            if attempt < max_retries - 1:
                print(f"‚úó –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º...")
                time.sleep(1)
            else:
                print(f"‚úó –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–±—Ä–æ—Å–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å: {e}")
    print("="*50)